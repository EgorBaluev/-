import streamlit as st
import pandas as pd
from utils.data_processor import process_excel_file
from utils.analyzer import analyze_data
from utils.visualizer import create_visualizations
import plotly.express as px
from datetime import timedelta

st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ —Ç–∏–∫–µ—Ç–æ–≤ –∏–∑ –¢–ü",
    page_icon="üìä",
    layout="wide"
)

# Load custom CSS
with open('assets/style.css') as f:
    st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

st.title("–ê–Ω–∞–ª–∏–∑ —Ç–∏–∫–µ—Ç–æ–≤ –∏–∑ –¢–ü")

# File upload section
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª", type=['xls', 'xlsx'])

if uploaded_file is not None:
    try:
        # Process the uploaded file
        df = process_excel_file(uploaded_file)

        # Basic statistics
        st.header("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric("–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤", len(df))
        with col2:
            st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", df['client'].nunique())
        with col3:
            st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", f"{df['response_time'].mean():.2f} —á")

        # Analysis section
        st.header("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")

        # Period comparison
        st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤")
        num_periods = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", min_value=1, max_value=3, value=2)

        periods = []
        period_names = ["–ü–µ—Ä–≤—ã–π –ø–µ—Ä–∏–æ–¥", "–í—Ç–æ—Ä–æ–π –ø–µ—Ä–∏–æ–¥", "–¢—Ä–µ—Ç–∏–π –ø–µ—Ä–∏–æ–¥"]

        for i in range(num_periods):
            st.subheader(period_names[i])
            col1, col2 = st.columns(2)
            with col1:
                start_date = st.date_input(
                    f"–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ {i+1}",
                    value=df['date'].min().date() + timedelta(days=i*30),
                    min_value=df['date'].min().date(),
                    max_value=df['date'].max().date()
                )
            with col2:
                end_date = st.date_input(
                    f"–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ {i+1}",
                    value=df['date'].min().date() + timedelta(days=(i+1)*30-1),
                    min_value=df['date'].min().date(),
                    max_value=df['date'].max().date()
                )
            periods.append((start_date, end_date))

        # Additional filters
        st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")
        selected_types = st.multiselect(
            "–¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è",
            options=df['ticket_type'].unique(),
            default=df['ticket_type'].unique()
        )

        # Create filtered dataframes for each period
        filtered_dfs = []
        for start_date, end_date in periods:
            mask = (
                (df['date'].dt.date >= start_date) &
                (df['date'].dt.date <= end_date) &
                (df['ticket_type'].isin(selected_types))
            )
            filtered_dfs.append(df[mask])

        # Get analysis results for each period
        analysis_results = [analyze_data(filtered_df) for filtered_df in filtered_dfs]

        # Display visualizations
        st.header("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        create_visualizations(filtered_dfs, analysis_results, period_names[:num_periods])

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")